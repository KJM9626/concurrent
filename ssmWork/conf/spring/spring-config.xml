<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xmlns:context="http://www.springframework.org/schema/context"
			xmlns:aop="http://www.springframework.org/schema/aop"
			xmlns:tx="http://www.springframework.org/schema/tx"
			xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
			xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<context:component-scan base-package="com.study">
<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
</context:component-scan>

<!-- 导入外部配置文件 -->
<context:property-placeholder location="classpath:dbconfig.properties"/>
<!-- 配置数据源 -->
<bean class="com.mchange.v2.c3p0.ComboPooledDataSource" id="dSource">
<property name="user" value="${jdbc.user}"></property>
<property name="password" value="${jdbc.password}"></property>
<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
<property name="driverClass" value="${jdbc.driverClass}"></property>
<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
<property name="minPoolSize" value="${jdbc.minPoolSize}"></property>
</bean>

<!-- 配置JdbcTemplate操作数据库（之前没有使用mybatis）才需要配置
<bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
<constructor-arg name="dataSource" ref="dSource"></constructor-arg>
</bean>
 -->
 <!--配置使用mybatis操作数据库  -->
 <!-- 可以根据配置文件得到SqlSessionFactory -->
 <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean">
 <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
 <property name="dataSource" ref="dSource"></property>
 <!-- 指定xml映射文件位置 -->
 <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>
 </bean>
 <!-- 我们要把每一个dao接口的实现加入到ioc容器中 -->
 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="mapperConfigurer">
 <!-- 指定dao接口所在的包 -->
 <property name="basePackage" value="com.study.dao"></property>
 </bean>
 <!-- 该标签功能等同于上面的配置将dao接口的实现加入到ioc容器中 -->
<!-- <mybatis-spring:scan base-package="com.study.dao"/> -->
 <!-- 配置事务控制,让他控制住数据源里面的连接的关闭和提交 -->
 <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="txManager">
 <property name="dataSource" ref="dSource"></property>
 </bean>
 
 <!--配置全局切面，基于xml配置，配置事务，哪些方法切入事务还要写切入点表达式  -->
 <aop:config>
 <aop:pointcut expression="execution(* com.study.service.*.*(..))" id="txPoint"/>
 <aop:advisor advice-ref="mytx" pointcut-ref="txPoint"/>
 </aop:config>
 
 <!--配置事务增强，事务属性，事务建议  -->
 <tx:advice id="mytx" transaction-manager="txManager">
  <!-- 配置事务属性 -->
  <tx:attributes>
  <tx:method name="*" rollback-for="java.lang.Exception"/>
  </tx:attributes>
 </tx:advice>

 
</beans>
